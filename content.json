{"meta":{"title":"jinguo's home","subtitle":null,"description":null,"author":"JinGuo","url":"http://yoursite.com"},"pages":[{"title":"","date":"2019-01-30T07:45:49.613Z","updated":"2019-01-30T07:44:43.178Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"金果的书屋，随心所欲的写想写的东西。"}],"posts":[{"title":"学习-TypeScript入门","slug":"学习-TypeScript入门","date":"2019-02-12T16:00:00.000Z","updated":"2019-02-12T16:00:00.000Z","comments":true,"path":"2019/02/13/学习-TypeScript入门/","link":"","permalink":"http://yoursite.com/2019/02/13/学习-TypeScript入门/","excerpt":"","text":"什么是 TypeScriptTypeScript 是 JavaScript 的超集，主要提供了类型系统和对 ES6 的支持。它编译出来是 JavaScript，可以运行在任何浏览器上。 TypeScript 的优点 增加了代码的可读性和可维护性（类型系统、编译报错、代码补全、接口提示等） TypeScript 非常包容（类型推论、定义一切类型、兼容三方库等） TypeScript 拥有活跃的社区（Angular2 是 TypeScript 编写，大部分三方库提供 TypeScript 类型定义文件） TypeScript 的缺点 有一定的学习成本（接口、泛型等） 会增加一些开发成本（多写一些类型的定义） TypeScript 安装命令行： npm install -g typescript安装完成后会在全局环境安装tsc\b命令，编译一个 typescript 文件直接用命令 tsc xxx.ts 即可。 TypeScript 使用原始数据类型原始数据类型包括：布尔型、数值型、字符串、null、undefined\b、Symbol。 布尔值let isBoolean: boolean = false; 数值let num: number = 1; 字符串let str: string = &#39;str&#39;; 空值123function alertName(): void &#123; alert('My Name is xxx');&#125; Null 和 Undefined1let u: undefined = undefined; 1let n: null = null; 任意值任意值用来表示允许赋值为任意类型。12let something: any = 'xxx';something = 1; 类型推论如果没有明确的指定类型，那么 TypeScript 会依照类型推论的规则推断出一个类型。 联合类型联合类型表示取值可以为多种类型中的一种。123let something: string | number;something = 'xxx';something = 1; 对象的类型–接口在 TypeScript 中，我们使用接口来定义对象的类型。12345678interface Person &#123; name: string; age: number;&#125;let ingot: Person = &#123; name: 'ingot', age: 25&#125; 定义的接口首字母大写。定义的变量比接口少一些属性和多一些属性都是不允许的。 可选属性1234567interface Person &#123; name: string; age?: number;&#125;let ingot: Person = &#123; name: 'ingot'&#125; 任意属性12345678interface Person &#123; name: string; [propName: string]: any;&#125;let ingot: Person = &#123; name: 'ingot', age: 11&#125; 需要注意的是，一旦定义了任意属性，那么确定属性和可选属性都必须是它的子属性。 只读属性1234interface Person &#123; readonly id: number, name: string&#125; 数组的类型类型+方括号表示法1let arr: number[] = [1, 2, 3, 4, 5]; 数组泛型1let arr: Array&lt;number&gt; = [1, 2, 3, 4, 5]; 用接口表示数组1234interface NumberArray &#123; [index: number]: number&#125;let arr: NumberArray = [1, 2, 3, 4, 5]; 函数的类型函数声明123function sum(x: number, y: number): number &#123; return x + y;&#125; 注意，输入多余的（或者少于要求的）参数，是不被允许的 函数表达式123let sum:(x: number, y: number) =&gt; number = function (x: number, y: number): number &#123; return x + y;&#125; 类型别名我们使用 type 创建类型别名。1type Name = string;","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[]},{"title":"书评-YDKJS入门与进阶","slug":"书评-YDKJS入门与进阶","date":"2019-01-30T16:00:00.000Z","updated":"2019-01-30T16:00:00.000Z","comments":true,"path":"2019/01/31/书评-YDKJS入门与进阶/","link":"","permalink":"http://yoursite.com/2019/01/31/书评-YDKJS入门与进阶/","excerpt":"","text":"前言我的书评会以对话的形式去表达，ydk 代表 YDKJS 书籍，ingot 代表笔者，google 代表搜索资料，每段对话都是 ydk 提问，ingot 先说自己的理解，然后 ydk 再给予正确的解答。 第一章：进入编程代码123ydk: 代码是一组告诉计算机要执行什么任务的特殊指令。通常保存在文本文件中，也可以在浏览器的\b开发者控制台中直接键入代码。ingot: js 代码在浏览器执行\b的过程是怎样的?google: 浏览器的 js 引擎会进行语法分析，预编译，然后去执行。 语句1234ydk: 语句是什么东西？ingot: \bingot: ydk: 是一组告诉计算机要执行什么任务的特殊指令。","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[]}]}